/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.64
 * Generated at: 2022-07-19 00:54:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("/* \r\n");
      out.write("	input:not(:first-child){\r\n");
      out.write("	margin-top: 5px;\r\n");
      out.write("	}\r\n");
      out.write(" */\r\n");
      out.write("	table tr:last-child td input[name=address]{\r\n");
      out.write("		margin-top: 5px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.ui-datepicker table tr th:first-child {\r\n");
      out.write("	border-right: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.ui-datepicker table tr {\r\n");
      out.write("	border-bottom: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#delete {\r\n");
      out.write("		position: relative;\r\n");
      out.write("		right: 30px;\r\n");
      out.write("		display: none;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.13.1/themes/base/jquery-ui.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/layout.jsp", out, false);
      out.write("\r\n");
      out.write("<div class=\"container-fluid px-4\">\r\n");
      out.write("	<h3 class=\"mt-4\">회원가입</h3>\r\n");
      out.write("	<p>* 는 필수입력 항목입니다</p>\r\n");
      out.write("	<form method='post' action='member_join.mb'>\r\n");
      out.write("		<table class=\"w-px600\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">* 성명</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"text\" name=\"name\"/>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">* 아이디</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"text\" name=\"userid\" class=\"chk\"/>\r\n");
      out.write("					<a class=\"btn-fill\" id=\"id_check\">아이디 중복확인</a>\r\n");
      out.write("					<div class=\"valid\">아이디를 입력하세요(영문소문자,숫자만 입력가능)</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">* 비밀번호</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"password\" name=\"userpw\" class=\"chk\"/>\r\n");
      out.write("					<div class=\"valid\">비밀번호를 입력하세요(영문대/소문자,숫자를 모두 포함)</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">* 비밀번호확인</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"password\" name=\"userpw_ck\" class=\"chk\"/>\r\n");
      out.write("					<div class=\"valid\">비밀번호를 다시 입력하세요</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">* 성별</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<label><input type=\"radio\" name=\"gender\" value=\"남\"/>남</label>\r\n");
      out.write("					<label><input type=\"radio\" name=\"gender\" value=\"여\" checked/>여</label>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">* 이메일</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"text\" name=\"email\" class=\"chk\"/>\r\n");
      out.write("					<div class=\"valid\">이메일을 입력하세요</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">생년월일</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"birth\" readonly/><a id=\"delete\"><i class=\"font-r fa-solid fa-calendar-xmark\"></i></a></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">전화번호</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"phone\"/></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-px140\">주소</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<a class=\"btn-fill\" id=\"post\">우편번호찾기</a>\r\n");
      out.write("					<input type=\"text\" name=\"post\" class=\"w-px80\" readonly/>\r\n");
      out.write("					<input type=\"text\" name=\"address\" readonly/>\r\n");
      out.write("					<input type=\"text\" name=\"address\"/>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>		\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	<div class=\"btnSet\">\r\n");
      out.write("		<a class=\"btn-fill\" onclick=\"fn_join()\">회원가입</a>\r\n");
      out.write("		<a class=\"btn-empty\" href=\"javascript:history.go(-1)\">취소</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"https://code.jquery.com/ui/1.13.1/jquery-ui.js\"></script>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script src='js/join_check.js?");
      out.print(new java.util.Date());
      out.write("'></script>\r\n");
      out.write("<!-- 계속 리프레시 되게 만드는 방법 -->\r\n");
      out.write("<script>\r\n");
      out.write("//회원가입처리\r\n");
      out.write("function fn_join(){\r\n");
      out.write("	//필수입력항목에 입력되어있는지 확인\r\n");
      out.write("	//특정항목에 대해서는 유효한 입력인지도 확인\r\n");
      out.write("	if( $('[name=name]').val() == '' ){\r\n");
      out.write("		alert('성명을 입력하세요');\r\n");
      out.write("		$('[name=name]').focus();\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//아이디는 중복확인여부에 따라 처리\r\n");
      out.write("	//중복확인 한 경우 \r\n");
      out.write("	//invalid 이면 회원가입불가\r\n");
      out.write("	if( $('[name=userid]').hasClass('checked') ){\r\n");
      out.write("		if( $('[name=userid]').siblings('div').hasClass('invalid') ){\r\n");
      out.write("			alert('회원가입 불가!\\n' + join.id.unUsable.desc );\r\n");
      out.write("			$('[name=userid]').focus();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("	}else{\r\n");
      out.write("	//중복확인 하지 않은 경우\r\n");
      out.write("		if( ! item_check( $('[name=userid]') ) ) return;\r\n");
      out.write("		else{\r\n");
      out.write("			alert('회원가입 불가!\\n' + join.id.valid.desc);\r\n");
      out.write("			$('[name=userid]').focus();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	if( ! item_check( $('[name=userpw]') ) ) return;\r\n");
      out.write("	if( ! item_check( $('[name=userpw_ck]') ) )  return;\r\n");
      out.write("	if( ! item_check( $('[name=email]') ) )  return;\r\n");
      out.write("	\r\n");
      out.write("	$('form').submit();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function item_check( tag ){\r\n");
      out.write("	var status = join.tag_status( tag );\r\n");
      out.write("	if( status.code=='invalid' ) {\r\n");
      out.write("		alert('회원가입 불가!\\n' + status.desc );\r\n");
      out.write("		tag.focus();\r\n");
      out.write("		return false;\r\n");
      out.write("	}else\r\n");
      out.write("		return true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$('#id_check').on('click', function(){\r\n");
      out.write("	id_check();\r\n");
      out.write("});\r\n");
      out.write("//아이디 중복확인처리\r\n");
      out.write("function id_check(){\r\n");
      out.write("	var $userid= $('[name=userid]');\r\n");
      out.write("	//유효한 입력 아이디에 대해서만 중복확인\r\n");
      out.write("	var status = join.tag_status( $userid );\r\n");
      out.write("	if( status.code=='invalid' ){\r\n");
      out.write("		alert( '아이디 중복확인 불필요\\n' +  status.desc );\r\n");
      out.write("		$userid.focus();\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url: 'id_check.mb',\r\n");
      out.write("		data: { id: $userid.val() },\r\n");
      out.write("		success: function( response ){\r\n");
      out.write("			$userid.addClass('checked');\r\n");
      out.write("			response = join.id_usable( response );\r\n");
      out.write("			$userid.siblings('div').text( response.desc )\r\n");
      out.write("									.removeClass().addClass( response.code );\r\n");
      out.write("		},error: function(req, text){\r\n");
      out.write("			alert(text +':' +req.status);\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//입력의 유효성을 판단\r\n");
      out.write("$('.chk').on('keyup', function(e){\r\n");
      out.write("	if( $(this).attr('name')=='userid' ){\r\n");
      out.write("		if( e.keyCode==13 ) { id_check(); return; }\r\n");
      out.write("		else $(this).removeClass('checked');\r\n");
      out.write("	}\r\n");
      out.write("	var status = join.tag_status( $(this) );\r\n");
      out.write("	$(this).siblings('div').text( status.desc ).removeClass().addClass( status.code );\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//만13세까지만 가입가능\r\n");
      out.write("var today = new Date();\r\n");
      out.write("var start = today.getFullYear()-100;\r\n");
      out.write("today.setFullYear( today.getFullYear() - 13 );\r\n");
      out.write("today.setDate( today.getDate()-1 );\r\n");
      out.write("var defaultDay = new Date();\r\n");
      out.write("defaultDay.setFullYear(1990); //1990-07-13 이 있는 달력이 기본으로 보이게\r\n");
      out.write("\r\n");
      out.write("$( \"[name=birth]\" ).datepicker({ \r\n");
      out.write("	dateFormat: 'yy-mm-dd',\r\n");
      out.write("	dayNamesMin: [ '일', '월', '화', '수', '목', '금', '토' ],\r\n");
      out.write("	showMonthAfterYear: true,\r\n");
      out.write("	monthNamesShort: ['1월', '2월', '3월', '4월', '5월', '6월'\r\n");
      out.write("					, '7월', '8월', '9월', '10월', '11월', '12월'],\r\n");
      out.write("	changeYear: true,\r\n");
      out.write("	changeMonth: true,\r\n");
      out.write("	//beforeShowDay: before,\r\n");
      out.write("	maxDate: today,\r\n");
      out.write("	yearRange: start +':'+today.getFullYear(),\r\n");
      out.write("	defaultDate: defaultDay,\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//특정날짜(오늘)까지만 선택할수 있게\r\n");
      out.write("function before(date){\r\n");
      out.write("	if( date > new Date() ) return [false];\r\n");
      out.write("	else 					return [true];\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//생년월일을 변경되면 삭제이미지가 보이게\r\n");
      out.write("$('[name=birth]').change(function(){\r\n");
      out.write("	$('#delete').css('display', 'inline');\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("//달력삭제 클릭시 생년월일 없애기, 삭제이미지도 안보이게\r\n");
      out.write("$('#delete').click(function(){\r\n");
      out.write("	$('[name=birth]').val('');\r\n");
      out.write("	$('#delete').css('display', 'none');\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// $('#post').click(function(){\r\n");
      out.write("$('#post').on('click', function(){	\r\n");
      out.write("    new daum.Postcode({\r\n");
      out.write("        oncomplete: function(data) {\r\n");
      out.write("			console.log( data );\r\n");
      out.write("        	$('[name=post]').val( data.zonecode );\r\n");
      out.write("        	//R:도로명주소, J:지번주소\r\n");
      out.write("        	var address = data.userSelectedType == 'R' \r\n");
      out.write("        					? data.roadAddress : data.jibunAddress;\r\n");
      out.write("        	if(data.buildingName!='') address += ' ('+data.buildingName+')';\r\n");
      out.write("        	$('[name=address]').eq(0).val( address );\r\n");
      out.write("        }\r\n");
      out.write("    }).open();\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/footer.jsp", out, false);
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
